[{"/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/index.js":"1","/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/App.js":"2","/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/components/SimpleInput.js":"3","/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/hooks/use-input.js":"4","/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/components/BasicForm.js":"5"},{"size":179,"mtime":1648643023000,"results":"6","hashOfConfig":"7"},{"size":213,"mtime":1670817966195,"results":"8","hashOfConfig":"7"},{"size":2187,"mtime":1670817923997,"results":"9","hashOfConfig":"7"},{"size":1208,"mtime":1670819778742,"results":"10","hashOfConfig":"7"},{"size":3192,"mtime":1670818978516,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"54r6l5",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/index.js",[],["24","25"],"/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/App.js",["26"],"/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/components/SimpleInput.js",["27"],"import {useState} from \"react\";\nimport useInput from \"../hooks/use-input\";\n\n\nconst SimpleInput = (props) => {\n    const {\n        value: enteredName,\n        isValid: enteredNameIsValid,\n        hasError: nameInputHasError,\n        valueChangeHandler: nameChangedHandler,\n        inputBlurHandler: nameBlurHandler,\n        reset: resetNameInput,\n    } = useInput(value => value.trim() !==\"\");\n\n    const {\n        value: enteredEmail,\n        isValid : enteredEmailIsValid,\n        hasError : emailInputHasError,\n        valueChangeHandler : emailChangeHandler,\n        inputBlurHandler: emailBlurHandler,\n        reset : resetEmailInput,\n    } = useInput(value => value.includes(\"@\"));\n\n\n    let formIsValid = false;\n\n    if(enteredNameIsValid && enteredEmailIsValid){\n        formIsValid = true;\n    }\n\n\n    const formSubmissionHandler = event => {\n        event.preventDefault();\n\n\n        if (!enteredNameIsValid || !enteredEmailIsValid) {\n            return;\n        }\n\n        resetNameInput();\n        resetEmailInput();\n    }\n\n\n    const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n    const emailInputClasses = emailInputHasError ? \"form-control invalid\" : \"form-control\";\n\n    return (\n        <form onSubmit={formSubmissionHandler}>\n            <div className={nameInputClasses}>\n                <label htmlFor='name'>Your Name</label>\n                <input type='text' id='name' onChange={nameChangedHandler} value={enteredName}\n                       onBlur={nameBlurHandler}/>\n                {nameInputHasError && <p className=\"error-text\">Name must not be empty!</p>}\n            </div>\n            <div className={emailInputClasses}>\n                <label htmlFor='email'>Your email</label>\n                <input type='email' id='email' onChange={emailChangeHandler} value={enteredEmail}\n                       onBlur={emailBlurHandler}/>\n                {emailInputHasError && <p className=\"error-text\">Email must include @!</p>}\n            </div>\n            <div className=\"form-actions\">\n                <button disabled={!formIsValid}>Submit</button>\n            </div>\n        </form>\n    );\n};\n\nexport default SimpleInput;\n","/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/hooks/use-input.js",[],"/Users/jong2/WebstormProjects/reactPractice/ReactPractice/section16/src/components/BasicForm.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":19},{"ruleId":"32","severity":1,"message":"36","line":1,"column":9,"nodeType":"34","messageId":"35","endLine":1,"endColumn":17},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'SimpleInput' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]